import{_ as s,c as e,o as t,ah as i,a_ as n,a$ as l,b0 as p,b1 as r,b2 as o,b3 as c,b4 as h}from"./chunks/framework.kZi0S3Z0.js";const f=JSON.parse('{"title":"Mybatis","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/mybatis.md","filePath":"java/mybatis.md"}'),d={name:"java/mybatis.md"};function m(b,a,g,u,k,_){return t(),e("div",null,[...a[0]||(a[0]=[i(`<h1 id="mybatis" tabindex="-1">Mybatis <a class="header-anchor" href="#mybatis" aria-label="Permalink to “Mybatis”">​</a></h1><blockquote><p>Mybatis是一个持久层框架，用于实现向数据库发送SQL语句，实现增删改查</p></blockquote><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to “开始”">​</a></h2><p>ORM: 对象关系映射。以操作对象的方式来操作数据表</p><h2 id="mybtais怎么映射字段名" tabindex="-1">Mybtais怎么映射字段名？ <a class="header-anchor" href="#mybtais怎么映射字段名" aria-label="Permalink to “Mybtais怎么映射字段名？”">​</a></h2><p>实体类属性名和数据库表查询返回的字段名一致的话，mybatis会自动封装，如果不一致，就不会自动封装。</p><p>如果字段名与属性名符合驼峰命名规则，mybatis会通过驼峰式命名自动映射。</p><h2 id="怎么打开驼峰自动映射" tabindex="-1">怎么打开驼峰自动映射？ <a class="header-anchor" href="#怎么打开驼峰自动映射" aria-label="Permalink to “怎么打开驼峰自动映射？”">​</a></h2><p>在mybatis的配置文件.xml中打开：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;settings&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;setting name =&quot;mapUnderscoureToCamelCase&quot; value=&quot;true&quot;/&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/settings&gt;</span></span></code></pre></div><h2 id="解决不符合驼峰映射" tabindex="-1">解决不符合驼峰映射： <a class="header-anchor" href="#解决不符合驼峰映射" aria-label="Permalink to “解决不符合驼峰映射：”">​</a></h2><p>1 : 加别名 比如数据库名字是entrydate，实体类名是ed</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>select * ,entrydate as ed from emp;</span></span></code></pre></div><p>2 : 交给框架帮我们映射，通过@Resultes及@Ressult进行手动结果映射，但是如果用xml映射的话，就不能和这个注解混合用了</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>@Select(&quot;select * from emp&quot;)</span></span>
<span class="line"><span>@Results({</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Result(column =&quot;数据库字段名&quot;，property=&quot;实体类字段名&quot;),</span></span>
<span class="line"><span></span></span>
<span class="line"><span> …………</span></span>
<span class="line"><span></span></span>
<span class="line"><span>})</span></span></code></pre></div><p>3 ：用xml手动映射 <img src="`+n+'" alt=""> 4 : 用MybatisPlus 的注解</p><h2 id="解决用-sql注入的问题" tabindex="-1">解决用${}sql注入的问题 <a class="header-anchor" href="#解决用-sql注入的问题" aria-label="Permalink to “解决用${}sql注入的问题”">​</a></h2><p>可以用concat()函数来做字符串拼接,执行的时候会把左右的占位符拼接,count(‘%’,’张’,’%’)</p><h2 id="复杂的sql可以写在xml映射文件中" tabindex="-1">复杂的sql可以写在xml映射文件中 <a class="header-anchor" href="#复杂的sql可以写在xml映射文件中" aria-label="Permalink to “复杂的sql可以写在xml映射文件中”">​</a></h2><p><img src="'+l+'" alt=""> 注意：不支持方法重载，mapper不能起两个同名的方法名 ### 动态sql 随着用户输入的外部条件变化而变化的sql语句，称为动态sql。 比如前端可以根据名字，性别，时间搜索，但是要是只搜索名字，不搜索其他，我们就不需要查询其他，所以要在xml里面动态拼接sql。 <img src="'+p+'" alt=""> 如果传入的值为空，就不查询，如果不为空，就执行查询： <img src="'+r+'" alt=""> 根据id更新字段，只更新名字，传谁就更新谁： <img src="'+o+'" alt=""> 批量删除，选谁删谁，用到,相当于遍历，你传入什么值，这边就记录什么值，最后执行 <img src="'+c+'" alt=""> 如果有多个查询语句，有公共代码，需要解耦，可以把公共代码写到sql片段中 <img src="'+h+'" alt=""> 每次连接都要去数据库，太影响性能了，我们可以设置数据库连接池，每次用的时候去连接池取，用完归还就可以了，接口DataSource，目前用的最多的是两个技术，阿里巴巴的Druid(功能强大)和日本的HikariCP(性能好，SpringBoot默认内置连接池)</p>',20)])])}const q=s(d,[["render",m]]);export{f as __pageData,q as default};
