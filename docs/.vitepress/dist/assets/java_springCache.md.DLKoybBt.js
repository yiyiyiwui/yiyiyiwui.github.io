import{_ as e,c as r,o as t,ah as c,bo as i,bp as p}from"./chunks/framework.kZi0S3Z0.js";const m=JSON.parse('{"title":"SpringCache","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/springCache.md","filePath":"java/springCache.md"}'),s={name:"java/springCache.md"};function n(h,a,o,l,_,d){return t(),r("div",null,[...a[0]||(a[0]=[c('<h1 id="springcache" tabindex="-1">SpringCache <a class="header-anchor" href="#springcache" aria-label="Permalink to “SpringCache”">​</a></h1><blockquote><p>SpringCache是一个框架，实现了基于注解的缓存功能</p></blockquote><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to “开始”">​</a></h2><p>添加依赖~ @EnableCachaing 放在启动类上，用于开启基于注解的缓存</p><p>@Cacheable 放在查询方法上， 方法执行前先看是否有缓存，如果有直接返回，如果没有，去后台查询方法并添加到缓存中</p><p>@CacheEvict 清空缓存</p><p>@CahePut （了解）</p><p>属性： value 用于指定缓存内存区域名称（可以理解为定义一片区域用于存储缓存） key 用于指定缓存数据的key，支持SPEL表达式（存储用户的id） 参数名称里面的id 在方法上添加缓存@Cacheable(value=”UserCache”,key = “# user.id”/或者 “result.id”) <img src="'+i+'" alt=""></p><p>@CacheEvict 清理一个或所有 <img src="'+p+'" alt=""></p>',9)])])}const g=e(s,[["render",n]]);export{m as __pageData,g as default};
