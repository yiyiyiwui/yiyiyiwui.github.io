import{_ as e,c as r,o as s,ah as t,bv as i,bw as n}from"./chunks/framework.kZi0S3Z0.js";const g=JSON.parse('{"title":"SpringTask","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/springTask.md","filePath":"java/springTask.md"}'),p={name:"java/springTask.md"};function o(l,a,c,d,_,h){return s(),r("div",null,[...a[0]||(a[0]=[t('<h1 id="springtask" tabindex="-1">SpringTask <a class="header-anchor" href="#springtask" aria-label="Permalink to “SpringTask”">​</a></h1><blockquote><p>Spring 框架内置的一个轻量级任务调度和异步执行模块</p></blockquote><h2 id="springtask-任务调度工具-可以按照约定的时间自动执行某个代码逻辑" tabindex="-1">SpringTask：任务调度工具，可以按照约定的时间自动执行某个代码逻辑 <a class="header-anchor" href="#springtask-任务调度工具-可以按照约定的时间自动执行某个代码逻辑" aria-label="Permalink to “SpringTask：任务调度工具，可以按照约定的时间自动执行某个代码逻辑”">​</a></h2><p>在启动类上添加注解：@EnableScheduling 开启定时任务注解</p><p>方法上添加注解： @Scheduled(fixedDelay=”毫秒时间”) / @Scheduled（cron=”cron表达式”）</p><h3 id="应用于用户下单后没有付款-我们可以设置一个定时任务" tabindex="-1">应用于用户下单后没有付款，我们可以设置一个定时任务 <a class="header-anchor" href="#应用于用户下单后没有付款-我们可以设置一个定时任务" aria-label="Permalink to “应用于用户下单后没有付款，我们可以设置一个定时任务”">​</a></h3><p>设置每分钟检查一次当前订单状态，如果为未支付，则修改为已取消</p><p>思路，用户下单后状态是待付款，过了15分钟之后，如果状态是未支付，就清理订单，所以这里要获取15分钟前的时间，LocalDateTime.now().plusMinutes(-15); 查询15分钟前订单状态为未支付的，就是未支付订单，然后清理订单 <img src="'+i+'" alt=""> 每天凌晨1点解决上一天的订单，如果状态为派送中，则修改为已完成 <img src="'+n+'" alt=""></p>',8)])])}const m=e(p,[["render",o]]);export{g as __pageData,m as default};
